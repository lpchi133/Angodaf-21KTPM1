// Generated by view binder compiler. Do not edit!
package com.example.angodafake.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.angodafake.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CustomSortBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView PriceHigh;

  @NonNull
  public final TextView PriceLow;

  @NonNull
  public final Button backToFilter;

  @NonNull
  public final ImageView checkmarkCmt;

  @NonNull
  public final ImageView checkmarkFit;

  @NonNull
  public final ImageView checkmarkHighest;

  @NonNull
  public final ImageView checkmarkLowest;

  @NonNull
  public final TextView comment;

  @NonNull
  public final TextView fit;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final LinearLayout linearLayout1;

  @NonNull
  public final LinearLayout linearLayout2;

  @NonNull
  public final LinearLayout linearLayout3;

  @NonNull
  public final LinearLayout linearLayout4;

  @NonNull
  public final TextView tvPrice;

  private CustomSortBinding(@NonNull LinearLayout rootView, @NonNull TextView PriceHigh,
      @NonNull TextView PriceLow, @NonNull Button backToFilter, @NonNull ImageView checkmarkCmt,
      @NonNull ImageView checkmarkFit, @NonNull ImageView checkmarkHighest,
      @NonNull ImageView checkmarkLowest, @NonNull TextView comment, @NonNull TextView fit,
      @NonNull LinearLayout linearLayout, @NonNull LinearLayout linearLayout1,
      @NonNull LinearLayout linearLayout2, @NonNull LinearLayout linearLayout3,
      @NonNull LinearLayout linearLayout4, @NonNull TextView tvPrice) {
    this.rootView = rootView;
    this.PriceHigh = PriceHigh;
    this.PriceLow = PriceLow;
    this.backToFilter = backToFilter;
    this.checkmarkCmt = checkmarkCmt;
    this.checkmarkFit = checkmarkFit;
    this.checkmarkHighest = checkmarkHighest;
    this.checkmarkLowest = checkmarkLowest;
    this.comment = comment;
    this.fit = fit;
    this.linearLayout = linearLayout;
    this.linearLayout1 = linearLayout1;
    this.linearLayout2 = linearLayout2;
    this.linearLayout3 = linearLayout3;
    this.linearLayout4 = linearLayout4;
    this.tvPrice = tvPrice;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomSortBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomSortBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.custom_sort, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomSortBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Price_high;
      TextView PriceHigh = ViewBindings.findChildViewById(rootView, id);
      if (PriceHigh == null) {
        break missingId;
      }

      id = R.id.Price_low;
      TextView PriceLow = ViewBindings.findChildViewById(rootView, id);
      if (PriceLow == null) {
        break missingId;
      }

      id = R.id.backToFilter;
      Button backToFilter = ViewBindings.findChildViewById(rootView, id);
      if (backToFilter == null) {
        break missingId;
      }

      id = R.id.checkmark_cmt;
      ImageView checkmarkCmt = ViewBindings.findChildViewById(rootView, id);
      if (checkmarkCmt == null) {
        break missingId;
      }

      id = R.id.checkmark_fit;
      ImageView checkmarkFit = ViewBindings.findChildViewById(rootView, id);
      if (checkmarkFit == null) {
        break missingId;
      }

      id = R.id.checkmark_highest;
      ImageView checkmarkHighest = ViewBindings.findChildViewById(rootView, id);
      if (checkmarkHighest == null) {
        break missingId;
      }

      id = R.id.checkmark_lowest;
      ImageView checkmarkLowest = ViewBindings.findChildViewById(rootView, id);
      if (checkmarkLowest == null) {
        break missingId;
      }

      id = R.id.comment;
      TextView comment = ViewBindings.findChildViewById(rootView, id);
      if (comment == null) {
        break missingId;
      }

      id = R.id.fit;
      TextView fit = ViewBindings.findChildViewById(rootView, id);
      if (fit == null) {
        break missingId;
      }

      id = R.id.linear_layout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.linear_layout1;
      LinearLayout linearLayout1 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout1 == null) {
        break missingId;
      }

      id = R.id.linear_layout2;
      LinearLayout linearLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout2 == null) {
        break missingId;
      }

      id = R.id.linear_layout3;
      LinearLayout linearLayout3 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout3 == null) {
        break missingId;
      }

      id = R.id.linear_layout4;
      LinearLayout linearLayout4 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout4 == null) {
        break missingId;
      }

      id = R.id.tvPrice;
      TextView tvPrice = ViewBindings.findChildViewById(rootView, id);
      if (tvPrice == null) {
        break missingId;
      }

      return new CustomSortBinding((LinearLayout) rootView, PriceHigh, PriceLow, backToFilter,
          checkmarkCmt, checkmarkFit, checkmarkHighest, checkmarkLowest, comment, fit, linearLayout,
          linearLayout1, linearLayout2, linearLayout3, linearLayout4, tvPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
